{"version":3,"sources":["scripts/mn-select.class.js"],"names":["MnSelect","self","_this","_ret","_classCallCheck","this","tabIndex","setMenu","setMobile","setSelected","setOptionEvents","setOpenEvents","setCloseEvents","setNameGetter","_possibleConstructorReturn","tabindex","getAttribute","setAttribute","menu","document","createElement","style","transform","classList","add","Array","from","children","forEach","child","option","textContent","attributes","attr","name","value","parentNode","removeChild","appendChild","insertBefore","firstChild","options","querySelector","cloneNode","cancelButton","removeAttribute","mobile","append","body","viewValue","selectedOption","_this2","querySelectorAll","concat","addEventListener","event","target","close","_this3","open","key","preventDefault","_this4","contains","esc","keyCode","isOpened","selectOption","form","closest","element","Object","defineProperty","get","select","remove","lastSelected","console","error","undefined","HTMLElement","window","customElements","define"],"mappings":"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","file":"mn-select.js","sourcesContent":["class MnSelect extends HTMLElement {\n  constructor(self) {\n    self = super(self)\n    this.tabIndex()\n    this.setMenu()\n    this.setMobile()\n    this.setSelected()\n    this.setOptionEvents()\n    this.setOpenEvents()\n    this.setCloseEvents()\n    this.setNameGetter()\n    return self\n  }\n\n  tabIndex() {\n    const tabindex = this.getAttribute('tabindex') || '0'\n    this.setAttribute('tabindex', tabindex)\n  }\n\n  setMenu() {\n    const menu = document.createElement('menu')\n    menu.style.transform = 'translate(-14px, -8px)'\n\n    menu.classList.add('mn-card')\n\n    Array\n      .from(this.children)\n      .forEach(child => {\n        // fallback option, some browsers dont support tag option\n        const option = document.createElement('div')\n        option.classList.add('mn-select-option')\n        option.textContent = child.textContent\n\n        Array\n          .from(child.attributes)\n          .forEach(attr => option.setAttribute(attr.name, attr.value))\n\n        child.parentNode.removeChild(child)\n        menu.appendChild(option)\n      })\n\n    this.insertBefore(menu, this.firstChild)\n  }\n\n  setMobile() {\n    const options = document.createElement('div')\n    const menu = this.querySelector('menu').cloneNode(true)\n    const cancelButton = document.createElement('button')\n\n    options.classList.add('mn-select-mobile')\n    menu.removeAttribute('class')\n    menu.removeAttribute('style')\n    cancelButton.textContent = 'cancel'\n\n    this.mobile = options\n    options.append(menu)\n    options.append(cancelButton)\n\n    document.body.append(options)\n  }\n\n  setSelected() {\n    const viewValue = document.createElement('div')\n    const selectedOption = this.getAttribute('placeholder')\n      ? this.querySelector('.mn-select-option[selected]')\n      : this.querySelector('.mn-select-option[selected]')\n        || this.querySelector('.mn-select-option')\n\n    if (selectedOption) {\n      const value = selectedOption.getAttribute('value') || selectedOption.textContent\n      this.value = value\n      this.classList.add('has-value')\n      viewValue.textContent = selectedOption.textContent\n    }\n    this.insertBefore(viewValue, this.firstChild)\n  }\n\n  setOptionEvents() {\n    const options = this.querySelectorAll('.mn-select-option')\n    const mobile = Array.from(this.mobile.querySelectorAll('.mn-select-option'))\n\n    Array\n      .from(options)\n      .concat(mobile)\n      .forEach(option => option.addEventListener('click', event => {\n        const value = event.target.getAttribute('value') || event.target.textContent\n        this.value = value\n        this.close()\n      }))\n  }\n\n  setOpenEvents() {\n    this.addEventListener('click', this.open)\n    this.addEventListener('keydown', event => {\n      switch (event.key) {\n        case 'Enter':\n        case ' ':\n          this.open()\n          event.preventDefault()\n      }\n    })\n  }\n\n  setCloseEvents() {\n    this.addEventListener('blur', () => this.close())\n    this.mobile.querySelector('button').addEventListener('click', () => this.close())\n    // need check if click in mobile outside works with event below to document click\n    // this.mobile.addEventListener('touchend', event => {\n    //   if (event.target.classList.contains('mn-select-mobile')) {\n    //     this.close()\n    //   }\n    // })\n    this.mobile.addEventListener('click', event => {\n      if (event.target.classList.contains('mn-select-mobile')) {\n        this.close()\n      }\n    })\n    document.addEventListener('keyup', () => {\n      const esc = event.keyCode === 27\n      let isOpened = document.body.classList.contains('mn-select-visible')\n\n      if (esc && isOpened) {\n        this.close()\n      }\n    })\n    document.addEventListener('click', event => {\n      // const clickOutside = !event.target.closest('mn-select')\n      const selectOption = event.target.classList.contains('mn-select-option')\n\n      // if (clickOutside || selectOption) {\n      if (selectOption) {\n        this.close()\n      }\n    })\n  }\n\n  setNameGetter() {\n    const form = this.closest('form')\n    const name = this.getAttribute('name')\n    const element = this\n\n    if (form && name) {\n      Object.defineProperty(form, name, {get: () => element})\n    }\n  }\n\n  set value(value) {\n    const option = this.querySelector(`.mn-select-option[value=\"${value}\"]`)\n\n    if (option) {\n      this.querySelector('div').textContent = option.textContent\n      this.classList.add('has-value')\n      const lastSelected = option.parentNode.querySelector('.mn-select-option[selected]')\n\n      if (lastSelected) {\n        lastSelected.removeAttribute('selected')\n      }\n      option.setAttribute('selected', 'selected')\n    } else {\n      console.error(`MN-SELECT OPTION_UNDEFINED\n        You're trying set a value (${value}) to mn-select,\n        but there is no option with this value to be displayed`)\n    }\n\n    this.setAttribute('value', value)\n  }\n\n  get value() {\n    return this.getAttribute('value') || undefined\n  }\n\n  open() {\n    this.close()\n    this.classList.add('visible')\n    this.mobile.classList.add('visible')\n    document.body.classList.add('mn-select-visible')\n  }\n\n  close() {\n    const select = document.querySelector('mn-select.visible')\n\n    if (select) {\n      select.classList.remove('visible')\n      select.mobile.classList.remove('visible')\n      document.body.classList.remove('mn-select-visible')\n    }\n  }\n}\n\nwindow.customElements.define('mn-select', MnSelect)\n\n"]}