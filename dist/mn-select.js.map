{"version":3,"sources":["scripts/mn-select.class.js"],"names":["MnSelect","self","_this","_ret","_classCallCheck","this","setTabIndex","setMenu","setMobileOptions","setSelected","setOptionEvents","setOpenEvents","setCloseEvents","_possibleConstructorReturn","tabindex","getAttribute","setAttribute","selected","document","createElement","selectedOption","querySelector","classList","add","textContent","insertBefore","firstChild","menu","style","transform","Array","from","children","forEach","child","fallbackOption","attributes","attr","name","value","parentNode","removeChild","appendChild","options","cloneNode","cancelButton","remove","removeAttribute","mobileOptions","append","body","open","addEventListener","_this2","querySelectorAll","concat","option","event","setSelectedOption","target","setValue","close","_this3","contains","esc","keyCode","isOpened","viewValue","setViewValue","console","error","text","childNodes","lastSelected","select","stopPropagation","clickOutside","tagName","HTMLElement","window","customElements","define"],"mappings":"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","file":"mn-select.js","sourcesContent":["class MnSelect extends HTMLElement {\n  constructor(self) {\n    self = super(self)\n    this.setTabIndex()\n    this.setMenu()\n    this.setMobileOptions()\n    this.setSelected()\n    this.setOptionEvents()\n    this.setOpenEvents()\n    this.setCloseEvents()\n    return self\n  }\n\n  setTabIndex() {\n    const tabindex = this.getAttribute('tabindex') || '0'\n    this.setAttribute('tabindex', tabindex)\n  }\n\n  setSelected() {\n    const selected = document.createElement('div')\n    const selectedOption = this.getAttribute('placeholder')\n      ? this.querySelector('.mn-select-option[selected]')\n      : this.querySelector('.mn-select-option[selected]') || this.querySelector('.mn-select-option')\n\n    if (selectedOption) {\n      this.classList.add('has-value')\n      selected.textContent = selectedOption.textContent\n    }\n    this.insertBefore(selected, this.firstChild)\n  }\n\n  setMenu() {\n    const menu = document.createElement('menu')\n    menu.style.transform = 'translate(-14px, -8px)'\n\n    menu.classList.add('mn-card')\n\n    Array\n      .from(this.children)\n      .forEach(child => {\n        const fallbackOption = document.createElement('div')\n        fallbackOption.classList.add('mn-select-option')\n        fallbackOption.textContent = child.textContent\n\n        Array\n          .from(child.attributes)\n          .forEach(attr => fallbackOption.setAttribute(attr.name, attr.value))\n\n        child.parentNode.removeChild(child)\n        menu.appendChild(fallbackOption)\n      })\n\n    this.insertBefore(menu, this.firstChild)\n  }\n\n  setMobileOptions() {\n    const options = document.createElement('div')\n    const menu = this.querySelector('menu').cloneNode(true)\n    const cancelButton = document.createElement('button')\n\n    options.classList.add('mn-mobile-options')\n    menu.classList.remove('mn-card')\n    menu.removeAttribute('style')\n    cancelButton.textContent = 'cancel'\n\n    this.mobileOptions = options\n    options.append(menu)\n    options.append(cancelButton)\n\n    document.body.append(options)\n  }\n\n  setOpenEvents() {\n    const open = this.open\n    this.addEventListener('click', open)\n  }\n\n  setOptionEvents() {\n    const options = this.querySelectorAll('.mn-select-option')\n    const mobileOptions = Array.from(this.mobileOptions.querySelectorAll('.mn-select-option'))\n\n    Array\n      .from(options)\n      .concat(mobileOptions)\n      .forEach(option => option.addEventListener('click', event => {\n        this.setSelectedOption(event.target)\n        this.setValue(event.target.getAttribute('value'))\n        this.close()\n      }))\n  }\n\n  setCloseEvents() {\n    this.mobileOptions.querySelector('button').addEventListener('click', () => this.close())\n    this.mobileOptions.addEventListener('touchend', event => {\n      if (event.target.classList.contains('mn-mobile-options')) {\n        this.close()\n      }\n    })\n    this.mobileOptions.addEventListener('click', event => {\n      if (event.target.classList.contains('mn-mobile-options')) {\n        this.close()\n      }\n    })\n    document.body.addEventListener('click', this.close)\n    document.addEventListener('keyup', () => {\n      const esc = event.keyCode === 27\n      let isOpened = document.body.classList.contains('mn-select-visible')\n\n      if (esc && isOpened) {\n        this.close()\n      }\n    })\n  }\n\n  setValue(value) {\n    const option = this.querySelector(`.mn-select-option[value=\"${value}\"]`)\n    const viewValue = option\n      ? option.textContent\n      : null\n\n    if (viewValue) {\n      this.setViewValue(viewValue)\n      this.classList.add('has-value')\n    } else {\n      console.error(`MN-SELECT OPTION_UNDEFINED\n        You're trying set a value (${value}) to mn-select,\n        but there is no option with this value to be displayed`)\n    }\n  }\n\n  setViewValue(text) {\n    this.childNodes[0].textContent = text\n  }\n\n  setSelectedOption(target) {\n    // const value = target.value || target.textContent\n    // target.parentNode.setAttribute('value', value)\n    const lastSelected = target.parentNode.querySelector('.mn-select-option[selected]')\n\n    if (lastSelected) {\n      lastSelected.removeAttribute('selected')\n    }\n    target.setAttribute('selected', 'selected')\n  }\n\n  open(event) {\n    if (event && event.target.classList.contains('.mn-select-option')) {\n      return false\n    }\n    this.classList.add('visible')\n    this.mobileOptions.classList.add('visible')\n    document.body.classList.add('mn-select-visible')\n  }\n\n  close(event) {\n    const select = document.querySelector('mn-select.visible')\n    if (event && select) {\n      event.stopPropagation()\n      const clickOutside = event.target.tagName === 'BODY'\n        || event.target.classList.contains('mn-mobile-options')\n        || event.target.classList.contains('mn-select-option')\n\n      if (clickOutside && select) {\n        document.body.classList.remove('mn-select-visible')\n        select.classList.remove('visible')\n        select.mobileOptions.classList.remove('visible')\n      }\n    } else if (select) {\n      document.body.classList.remove('mn-select-visible')\n      select.classList.remove('visible')\n      select.mobileOptions.classList.remove('visible')\n    }\n  }\n}\n\nwindow.customElements.define('mn-select', MnSelect)\n\n"]}